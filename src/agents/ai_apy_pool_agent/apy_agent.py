from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
import json
import requests
from typing import Dict, List, Optional

TELEGRAM_BOT_TOKEN = "7633131821:AAForOPCLS045IFHihMf49UozGwKL7IMbpU"
ENSO_API_KEY = "1e02632d-6feb-4a75-a157-documentation"


class APYAgent:
    def __init__(self, api_key: str):
        self.base_url = "https://api.enso.finance/api/v1"
        self.headers = {
            "accept": "application/json",
            "Authorization": f"Bearer {api_key}"
        }

    def get_protocols(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
        response = requests.get(f"{self.base_url}/protocols", headers=self.headers)
        return response.json()

    def get_defi_tokens(self, chain_id: int = 1, protocol_slug: Optional[str] = None) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç DeFi —Ç–æ–∫–µ–Ω—ã —Å –∏—Ö APY"""
        params = {
            "chainId": chain_id,
            "type": "defi"
        }
        if protocol_slug:
            params["protocolSlug"] = protocol_slug
        response = requests.get(f"{self.base_url}/tokens", headers=self.headers, params=params)
        return response.json()

    def is_valid_apy(self, apy) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ APY –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
        if apy is None:
            return False
        try:
            apy_float = float(apy)
            return apy_float > 0 and apy_float < 1000
        except (TypeError, ValueError):
            return False

    async def find_best_pool(self, token_address: str, chain_id: int = 1) -> Dict:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—É–ª —Å –ª—É—á—à–∏–º APY –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        print(f"\nüîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø—É–ª–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token_address}")
        protocols = self.get_protocols()
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤: {len(protocols)}")
        best_pool = {
            "apy": 0,
            "protocol": None,
            "token_address": None,
            "found_pools": []
        }

        for protocol in protocols:
            try:
                print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol['name']} ({protocol['slug']})")

                if not any(chain['id'] == chain_id for chain in protocol['chains']):
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞—é {protocol['slug']} - —Å–µ—Ç—å {chain_id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    continue

                defi_tokens = self.get_defi_tokens(chain_id, protocol['slug'])
                tokens = defi_tokens.get("data", [])
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ {protocol['slug']}")

                for token in tokens:
                    underlying_addresses = [t['address'].lower() for t in token.get('underlyingTokens', [])]
                    if token_address.lower() in underlying_addresses:
                        apy = token.get("apy")
                        print(f"‚ú® –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–ª –≤ {protocol['slug']} —Å APY: {apy}%")

                        pool_info = {
                            "apy": apy if self.is_valid_apy(apy) else 0,
                            "protocol": protocol['slug'],
                            "protocol_name": protocol['name'],
                            "token_address": token["address"],
                            "primary_address": token.get("primaryAddress"),
                            "type": token.get("type")
                        }
                        best_pool["found_pools"].append(pool_info)

                        if self.is_valid_apy(apy) and apy > best_pool["apy"]:
                            best_pool.update({
                                "apy": apy,
                                "protocol": protocol['slug'],
                                "protocol_name": protocol['name'],
                                "token_address": token["address"],
                                "primary_address": token.get("primaryAddress"),
                                "type": token.get("type")
                            })

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {protocol['slug']}: {str(e)}")
                continue

        print(f"\nüìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: {len(best_pool['found_pools'])}")
        if best_pool['protocol']:
            print(f"üèÜ –õ—É—á—à–∏–π –ø—É–ª: {best_pool['protocol_name']} —Å APY {best_pool['apy']}%")

        return best_pool

    def format_investment_recommendation(self, best_pool: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        if not best_pool["protocol"]:
            return "üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–ª—ã –ø–æ APY
        sorted_pools = sorted(
            [pool for pool in best_pool["found_pools"] if self.is_valid_apy(pool["apy"])],
            key=lambda x: x["apy"],
            reverse=True
        )[:5]

        pools_text = "\n".join([
            f"‚Ä¢ *{pool['protocol_name']}*: {pool['apy']:.2f}% APY"
            for pool in sorted_pools
        ])

        recommendation = f"""
üèÜ *–õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*

{pools_text}

üìä *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ–≥–æ –ø—É–ª–∞:*
‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª: `{best_pool['protocol_name']}`
‚Ä¢ APY: `{best_pool['apy']:.2f}%`
‚Ä¢ –¢–∏–ø: `{best_pool['type']}`
‚Ä¢ –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: `{best_pool['token_address']}`
‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: `{best_pool['primary_address']}`

üí° _–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å APY –∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º._

#DeFi #Yield #Investment üöÄ
"""
        return recommendation


bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
agent = APYAgent(ENSO_API_KEY)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π –ø—É–ª –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /find_pools <–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞> - –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø—É–ª—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/find_pools 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`
"""
    await message.answer(welcome_text, parse_mode="Markdown")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await cmd_start(message)


@dp.message(Command("find_pools"))
async def find_pools(message: Message):
    print(f"\nü§ñ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø—É–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}")

    try:
        token_address = message.text.split()[1]
        print(f"üìù –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: {token_address}")
    except IndexError:
        print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞")
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: `/find_pools 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48`",
            parse_mode="Markdown")
        return

    status_message = await message.answer("üîç –ò—â—É –ª—É—á—à–∏–µ –ø—É–ª—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        best_pool = await agent.find_best_pool(token_address)

        recommendation = agent.format_investment_recommendation(best_pool)
        await status_message.edit_text(recommendation, parse_mode="Markdown")

    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É–ª–æ–≤: {str(e)}"
        await status_message.edit_text(error_message)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
