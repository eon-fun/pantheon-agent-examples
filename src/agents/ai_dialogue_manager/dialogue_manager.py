import asyncio
from telethon import TelegramClient, events, functions
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PhoneNumberUnoccupiedError
from telethon.tl.types import Message, PeerUser, PeerChannel, PeerChat, InputPeerEmpty
from services.ai_tools.openai_client import send_openai_request
from database.redis.redis_client import RedisDB
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = ""  # –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –∞–∫–∫–∞
API_HASH = ""  # –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –∞–∫–∫–∞
SESSION_NAME = "my_telegram_session"
REDIS_MESSAGES_KEY = "telegram_messages"
BOT_COMMAND = "/summary"

PROMPT = (
    "You are an assistant summarizing messages in a chat. "
    "Your task is to create a brief summary of what each user discussed without answering any questions. "
    "For example: \n"
    "@username mentioned something about topic X.\n"
    "@another_user brought up another topic Y.\n"
    "Also note if someone was mentioned or replied to in the chat and include the chat name. "
    "Do not provide solutions, just summarize the content of the messages concisely."
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
db = RedisDB()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, int(API_ID), API_HASH)


async def collect_messages(event):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –≤ Redis."""
    if event.text and isinstance(event.message, Message):
        if not event.message.out or event.message.mentioned or event.message.reply_to:
            sender = await event.get_sender()
            chat = await event.get_chat()
            chat_id = chat.id
            chat_name = chat.title if hasattr(chat, 'title') and chat.title else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
            username = sender.username if sender and sender.username else None
            name = f"@{username}" if username else (sender.first_name if sender and sender.first_name else "Unknown")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç
            action = "–Ω–∞–ø–∏—Å–∞–ª"
            if event.message.mentioned:
                action = "—É–ø–æ–º—è–Ω—É–ª"
            elif event.message.reply_to:
                action = "–æ—Ç–≤–µ—Ç–∏–ª"

            message_id = str(event.message.id)

            message_data = {
                "id": message_id,
                "text": event.text,
                "sender_username": name,
                "action": action,
                "chat_name": chat_name,
                "chat_id": chat_id,
                "timestamp": event.message.date.timestamp()
            }
            db.add_to_sorted_set(REDIS_MESSAGES_KEY, int(message_data["timestamp"]), json.dumps(message_data))
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ '{chat_name}': {event.text[:50]}...")


async def clean_read_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis."""
    try:
        dialogs = await client(functions.messages.GetDialogsRequest(
            offset_date=None,
            offset_id=0,
            offset_peer=InputPeerEmpty(),
            limit=100,
            hash=0
        ))

        messages = db.get_sorted_set(REDIS_MESSAGES_KEY)
        updated_messages = []

        for msg in messages:
            msg_data = json.loads(msg)
            chat_id = msg_data["chat_id"]
            message_id = int(msg_data["id"])

            # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            dialog = next((d for d in dialogs.dialogs if (
                    isinstance(d.peer, PeerUser) and d.peer.user_id == chat_id) or (
                                   isinstance(d.peer, PeerChannel) and d.peer.channel_id == chat_id) or (
                                   isinstance(d.peer, PeerChat) and d.peer.chat_id == chat_id)
                           ), None)

            if dialog and dialog.read_inbox_max_id >= message_id:
                print(f"üóë –£–¥–∞–ª—è–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}.")
            else:
                updated_messages.append(msg)

        # –û–±–Ω–æ–≤–ª—è–µ–º Redis
        db.delete(REDIS_MESSAGES_KEY)
        for msg in updated_messages:
            db.add_to_sorted_set(REDIS_MESSAGES_KEY, json.loads(msg)["timestamp"], msg)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def generate_summary():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ Redis."""
    await clean_read_messages()

    messages = db.get_sorted_set(REDIS_MESSAGES_KEY)
    if not messages:
        return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º username, –¥–µ–π—Å—Ç–≤–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
    combined_text = "\n".join([
        f"[{json.loads(msg)['chat_name']}] {json.loads(msg)['sender_username']} {json.loads(msg)['action']}: {json.loads(msg)['text']}"
        for msg in messages
    ])

    # –û—á–∏—â–∞–µ–º Redis –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏
    db.delete(REDIS_MESSAGES_KEY)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    messages = [
        {"role": "system", "content": PROMPT},
        {"role": "user", "content": combined_text}
    ]

    try:
        summary = await send_openai_request(messages)
        return summary.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–¥–∫–∏: {e}"


@client.on(events.NewMessage(pattern=BOT_COMMAND))
async def handle_summary_command(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É."""
    await event.respond("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    summary = await generate_summary()
    await event.respond(f"üìã –°–≤–æ–¥–∫–∞:\n{summary}")


@client.on(events.NewMessage)
async def handle_new_message(event):
    """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await collect_messages(event)


async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telethon")
    try:
        await client.connect()
        if not await client.is_user_authorized():
            print("‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            phone = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ").strip()
            try:
                await client.send_code_request(phone)
                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ").strip()
                try:
                    await client.sign_in(phone=phone, code=code)
                except SessionPasswordNeededError:
                    print("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA)")
                    password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å: ").strip()
                    await client.sign_in(password=password)
                    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º!")
            except PhoneCodeInvalidError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except PhoneNumberUnoccupiedError:
                print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram.")
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")
        await client.run_until_disconnected()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(main())
