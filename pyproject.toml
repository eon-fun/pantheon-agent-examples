[project]
name = "pantheon-agent-examples"
version = "0.1.0"
description = "Collection of Pantheon agent examples"
authors = [{ name = "Pantheon Team", email = "team@pantheon.com" }]
readme = "README.md"
requires-python = ">=3.10,<3.14"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
ruff = "^0.11.12"
mypy = "^1.16.0"
pytest = "^8.3.4"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.24.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "BLE001",
    "F821",
    "PERF",
    "INP001",
    "A001",
    "PLW2901",
    "G",
    "E501",
    "PTH",
    "TRY",
    "ARG",
    "C",
    "ERA",
    "PLR",
    "DTZ",
    "S",
    "RUF",
    "PERF203",
    "ANN",
    "TRY401",
    "EM",
    "FBT",
    "TRY003",
    "D1",
    "D203",
    "D213",
    "G004",
    "FA",
    "COM812",
    "ISC001",
    "RUF001",
    "B904",
    "ASYNC110",
    "ASYNC210",
    "ASYNC230",
    "FIX002",
    "T",        # ← ДОБАВЛЕНО! Разрешает print() и pprint()
    "T201",     # ← Разрешает print()
    "T203",     # ← Разрешает pprint()
    "D2",       # ← Игнорируем все docstring ошибки D2xx
    "D3",       # ← Игнорируем все docstring ошибки D3xx
    "D4",       # ← Игнорируем все docstring ошибки D4xx (включая D400, D401, D415)
    "RET504",   # ← Разрешает ненужные return assignments
    "SLF001",   # ← Разрешает доступ к приватным членам
    "SIM102",   # ← Разрешает вложенные if
    "SIM117",   # ← Разрешает вложенные with
    "SIM110",   # ← Разрешает for loops вместо any()
    "SIM108",   # ← Разрешает if-else вместо ternary
    "F841",     # ← Разрешает неиспользуемые переменные
    "E741",     # ← Разрешает короткие имена переменных
    # Дополнительные игнорирования для legacy кода:
    "TD002",    # ← Игнорирует отсутствие автора в TODO
    "TD003",    # ← Игнорирует отсутствие ссылки в TODO
    "TD004",    # ← Игнорирует отсутствие двоеточия в TODO
    "FAST002",  # ← Разрешает FastAPI без Annotated
    "B008",     # ← Разрешает вызовы функций в default args
    "N805",     # ← Разрешает cls вместо self в методах
    "F811",     # ← Разрешает переопределения классов
    "UP036",    # ← Разрешает устаревшие version blocks
    "SIM105",   # ← Разрешает try-except-pass
    "A002",     # ← Разрешает shadowing builtins
    "E712",     # ← Разрешает сравнения с False/True
    "N803",     # ← Разрешает camelCase аргументы
    "TC002",    # ← Разрешает импорты вне type-checking блоков
    "E402",     # ← Разрешает импорты не в начале файла
    "LOG015",   # ← Разрешает использование root logger
    "N806",     # ← Разрешает upper case в функциях
    "RET503",   # ← Разрешает отсутствие explicit return
    "E722",     # ← Разрешает bare except
    "PT011",    # ← Разрешает pytest.raises(Exception)
]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.10"
# Максимально мягкие настройки для legacy кода
warn_return_any = false
warn_unused_configs = false
check_untyped_defs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_subclassing_any = false
warn_redundant_casts = false
warn_unused_ignores = false
strict_optional = false
strict_equality = false
ignore_missing_imports = true
ignore_errors = false
show_error_codes = true
follow_imports = "silent"

exclude = [
    "tests/",
    "build/",
    "dist/",
    # Исключаем агентов с дефисами (невалидные имена Python пакетов):
    "agents/ai_predicts_manager/",  # Проблемы с типами в legacy коде
    "agents/base-agent/",
    "agents/creativity-agent/",
    "agents/example-agent/",
    "agents/kol-agent/",
    "agents/persona-agent/",
    "agents/solana-new-pairs/",
    "agents/telegram-listener/",
    "agents/tik-tok-test-agent/",
    "agents/tw-amb-comments-answerer/",
    "agents/tw-amb-gorilla-marketing/",
    "agents/tw-amb-mention-answerer/",
    "agents/twitter-ambassador-commentator/",
    "agents/twitter-ambassador-liker/",
    "agents/twitter-ambassador-posting-agent/",
    "agents/twitter-echo-bot/",
]

disable_error_code = [
    "no-untyped-def",
    "no-untyped-call",
    "no-any-return",
    "misc",
    "type-arg",
    "unused-ignore",
    "override",
    "assignment",
    "arg-type",
    "call-overload",
    "return-value",
    "attr-defined",
    "name-defined",
    "call-arg",
    "var-annotated",
    "valid-type",
    "comparison-overlap",
    "unused-coroutine",
]

[[tool.mypy.overrides]]
module = [
    "pydantic.*",
    "pydantic_settings.*",
    "ray.*",
    "libp2p.*",
    "multiaddr.*",
    "langchain.*",
    "langfuse.*",
    "openai.*",
    "mem0ai.*",
    "lightrag_hku.*",
    "redisvl.*",
]
ignore_errors = true
