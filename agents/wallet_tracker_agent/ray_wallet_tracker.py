import os
from dataclasses import dataclass

import aiohttp
import ray
from database.redis.redis_client import RedisDB


@dataclass
class Transaction:
    wallet: str
    type: str  # buy/sell
    token: str
    amount: float
    timestamp: int
    hash: str
    chain: str
    price: float | None = None


def hex_to_decimal(hex_string: str, base_type: str = "value") -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è hex –∑–Ω–∞—á–µ–Ω–∏—è –≤ decimal"""
    if not hex_string.startswith("0x"):
        return float(hex_string)
    try:
        dec_value = int(hex_string, 16)
        if base_type == "value":
            return float(dec_value)
        return dec_value  # –¥–ª—è timestamp –≤–æ–∑–≤—Ä–∞—â–∞–µ–º int
    except ValueError:
        return 0.0


@ray.remote
class WalletTrackingAgent:
    def __init__(self):
        # Initialize constants
        self.WATCHED_WALLETS_KEY = "watched_wallets"
        self.PROCESSED_TXS_KEY = "processed_transactions"
        self.ANKR_API_KEY = os.getenv("ANKR_API_KEY")
        self.ANKR_API_URL = f"https://rpc.ankr.com/multichain/{self.ANKR_API_KEY}" if self.ANKR_API_KEY else None

        # Initialize Redis
        self.db = RedisDB()
        print("‚úÖ WalletTrackingAgent initialized")

    async def check_wallet_transactions(self, wallet_address: str) -> list[Transaction]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Ankr RPC API"""
        processed_txs = set(self.db.get_set(f"{self.PROCESSED_TXS_KEY}:{wallet_address}"))
        transactions = []

        payload = {
            "jsonrpc": "2.0",
            "method": "ankr_getTransactionsByAddress",
            "params": {
                "address": wallet_address,
                "blockchain": ["eth", "bsc", "polygon", "arbitrum", "optimism"],
                "pageSize": 50,
                "pageToken": "",
                "fromBlock": "latest",
            },
            "id": 1,
        }

        headers = {"Content-Type": "application/json"}

        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ankr RPC API –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_address}")
            async with aiohttp.ClientSession() as session:
                async with session.post(self.ANKR_API_URL, headers=headers, json=payload, timeout=30) as response:
                    if response.status != 200:
                        print(f"–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å {response.status}")
                        return []

                    data = await response.json()
                    if "error" in data:
                        print(f"–û—à–∏–±–∫–∞ API: {data['error']}")
                        return []

                    transactions_data = data.get("result", {}).get("transactions", [])
                    print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions_data)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

                    for tx in transactions_data:
                        tx_hash = tx.get("hash")
                        if tx_hash in processed_txs:
                            continue

                        try:
                            value = hex_to_decimal(tx.get("value", "0x0"), "value")
                            timestamp = hex_to_decimal(tx.get("timestamp", "0x0"), "timestamp")

                            transaction = Transaction(
                                wallet=wallet_address,
                                type="buy" if tx.get("to", "").lower() == wallet_address.lower() else "sell",
                                token=tx.get("currency", {}).get("symbol", "ETH"),
                                amount=value / (10**18),  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ Wei –≤ ETH
                                timestamp=timestamp,
                                hash=tx_hash,
                                chain=tx.get("blockchain", "eth"),
                            )
                            transactions.append(transaction)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {wallet_address}: {e}")

        return transactions

    def format_transaction_message(self, tx: Transaction) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        action_emoji = "üü¢" if tx.type == "buy" else "üî¥"
        chain_urls = {
            "eth": "etherscan.io",
            "polygon": "polygonscan.com",
            "bsc": "bscscan.com",
            "arbitrum": "arbiscan.io",
            "optimism": "optimistic.etherscan.io",
        }

        explorer_url = f"https://{chain_urls.get(tx.chain, 'etherscan.io')}/tx/{tx.hash}"

        return (
            f"{action_emoji} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ\n\n"
            f"üîó –ö–æ—à–µ–ª–µ–∫: `{tx.wallet}`\n"
            f"‚õìÔ∏è –°–µ—Ç—å: `{tx.chain}`\n"
            f"üí± –î–µ–π—Å—Ç–≤–∏–µ: {action_emoji} {'–ü–æ–∫—É–ø–∫–∞' if tx.type == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'}\n"
            f"ü™ô –¢–æ–∫–µ–Ω: `{tx.token}`\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{tx.amount}`\n"
            f"üíµ –¶–µ–Ω–∞: `${tx.price if tx.price else '–Ω/–¥'}`\n\n"
            f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é]({explorer_url})"
        )

    async def add_wallet(self, wallet: str) -> bool:
        """Adds a wallet to the watched list."""
        try:
            if len(wallet) != 42 or not wallet.startswith("0x"):
                return False
            self.db.add_to_set(self.WATCHED_WALLETS_KEY, wallet)
            return True
        except Exception as e:
            print(f"‚ùå Error adding wallet {wallet}: {e}")
            return False

    async def remove_wallet(self, wallet: str) -> bool:
        """Removes a wallet from the watched list."""
        try:
            self.db.r.srem(self.WATCHED_WALLETS_KEY, wallet)
            return True
        except Exception as e:
            print(f"‚ùå Error removing wallet {wallet}: {e}")
            return False

    async def get_wallet_list(self) -> set:
        """Returns the list of watched wallets."""
        return self.db.get_set(self.WATCHED_WALLETS_KEY)

    async def process_wallets(self) -> list[dict]:
        """Main method to process wallets and check for new transactions."""
        try:
            wallets = await self.get_wallet_list()
            if not wallets:
                return []

            all_messages = []
            for wallet in wallets:
                transactions = await self.check_wallet_transactions(wallet)
                for tx in transactions:
                    message = self.format_transaction_message(tx)
                    all_messages.append({"message": message, "tx_hash": tx.hash, "wallet": wallet})
                    self.db.add_to_set(f"{self.PROCESSED_TXS_KEY}:{wallet}", tx.hash)

            return all_messages
        except Exception as e:
            print(f"‚ùå Error in process_wallets: {e}")
            return []
