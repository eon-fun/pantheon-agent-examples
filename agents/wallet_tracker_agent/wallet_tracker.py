import asyncio
import sys
from dataclasses import dataclass

import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from database.redis.redis_client import RedisDB


@dataclass
class Transaction:
    wallet: str
    type: str  # buy/sell
    token: str
    amount: float
    timestamp: int
    hash: str
    chain: str
    price: float | None = None


def hex_to_decimal(hex_string: str, base_type: str = "value") -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è hex –∑–Ω–∞—á–µ–Ω–∏—è –≤ decimal

    Args:
        hex_string: Hex —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        base_type: –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è ('value' –∏–ª–∏ 'timestamp')

    """
    if not hex_string.startswith("0x"):
        return float(hex_string)
    try:
        dec_value = int(hex_string, 16)
        if base_type == "value":
            return float(dec_value)
        return dec_value  # –¥–ª—è timestamp –≤–æ–∑–≤—Ä–∞—â–∞–µ–º int
    except ValueError:
        return 0.0


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
db = RedisDB()
WATCHED_WALLETS_KEY = "watched_wallets"
PROCESSED_TXS_KEY = "processed_transactions"

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "7633131821:AAForOPCLS045IFHihMf49UozGwKL7IMbpU"
TELEGRAM_CHANNEL_ID = "@pantheoncryptotest"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ANKR_API_KEY = "0edb7f866074ee92aa1c799f1829524801c36af92624abaaa8ba5517b98104f4"
ANKR_API_URL = f"https://rpc.ankr.com/multichain/{ANKR_API_KEY}"

if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


async def check_wallet_transactions(wallet_address: str) -> list[Transaction]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Ankr RPC API"""
    processed_txs = set(db.get_set(f"{PROCESSED_TXS_KEY}:{wallet_address}"))
    transactions = []

    payload = {
        "jsonrpc": "2.0",
        "method": "ankr_getTransactionsByAddress",
        "params": {
            "address": wallet_address,
            "blockchain": ["eth", "bsc", "polygon", "arbitrum", "optimism"],
            "pageSize": 50,
            "pageToken": "",
            "fromBlock": "latest",
        },
        "id": 1,
    }

    headers = {"Content-Type": "application/json"}

    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ankr RPC API –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_address}")
        print(f"Payload: {payload}")

        async with aiohttp.ClientSession() as session:
            async with session.post(ANKR_API_URL, headers=headers, json=payload, timeout=30) as response:
                response_text = await response.text()
                print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:500]}...")

                if response.status != 200:
                    print(f"–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å {response.status}: {response_text}")
                    return []

                try:
                    data = await response.json()
                    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã")
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}\n–û—Ç–≤–µ—Ç: {response_text}")
                    return []

                if "error" in data:
                    print(f"–û—à–∏–±–∫–∞ API: {data['error']}")
                    return []

                transactions_data = data.get("result", {}).get("transactions", [])
                print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(transactions_data)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

                for tx in transactions_data:
                    tx_hash = tx.get("hash")
                    if tx_hash in processed_txs:
                        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                        continue

                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –∑–Ω–∞—á–µ–Ω–∏—è –≤ decimal
                        value = hex_to_decimal(tx.get("value", "0x0"), "value")
                        timestamp = hex_to_decimal(tx.get("timestamp", "0x0"), "timestamp")

                        transaction = Transaction(
                            wallet=wallet_address,
                            type="buy" if tx.get("to", "").lower() == wallet_address.lower() else "sell",
                            token=tx.get("currency", {}).get("symbol", "ETH"),
                            amount=value / (10**18),  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ Wei –≤ ETH
                            timestamp=timestamp,
                            hash=tx_hash,
                            chain=tx.get("blockchain", "eth"),
                        )
                        transactions.append(transaction)
                        print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {wallet_address}: {e}")

    return transactions


def format_transaction_message(tx: Transaction) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    action_emoji = "üü¢" if tx.type == "buy" else "üî¥"
    chain_urls = {
        "eth": "etherscan.io",
        "polygon": "polygonscan.com",
        "bsc": "bscscan.com",
        "arbitrum": "arbiscan.io",
        "optimism": "optimistic.etherscan.io",
    }

    explorer_url = f"https://{chain_urls.get(tx.chain, 'etherscan.io')}/tx/{tx.hash}"

    return (
        f"{action_emoji} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ\n\n"
        f"üîó –ö–æ—à–µ–ª–µ–∫: `{tx.wallet}`\n"
        f"‚õìÔ∏è –°–µ—Ç—å: `{tx.chain}`\n"
        f"üí± –î–µ–π—Å—Ç–≤–∏–µ: {action_emoji} {'–ü–æ–∫—É–ø–∫–∞' if tx.type == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'}\n"
        f"ü™ô –¢–æ–∫–µ–Ω: `{tx.token}`\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{tx.amount}`\n"
        f"üíµ –¶–µ–Ω–∞: `${tx.price if tx.price else '–Ω/–¥'}`\n\n"
        f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é]({explorer_url})"
    )


@dp.message(Command("add_wallet"))
async def add_wallet(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        wallet = message.text.split()[1]
        if len(wallet) != 42 or not wallet.startswith("0x"):
            await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å.")
            return

        db.add_to_set(WATCHED_WALLETS_KEY, wallet)
        await message.reply(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {wallet} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")
    except IndexError:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")


@dp.message(Command("list_wallets"))
async def list_wallets(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
    wallets = db.get_set(WATCHED_WALLETS_KEY)
    if not wallets:
        await message.reply("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—É—Å—Ç")
        return

    wallet_list = "\n".join([f"‚Ä¢ `{w}`" for w in wallets])
    await message.reply(f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:\n{wallet_list}")


@dp.message(Command("remove_wallet"))
async def remove_wallet(message: Message):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        wallet = message.text.split()[1]
        db.r.srem(WATCHED_WALLETS_KEY, wallet)
        await message.reply(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {wallet} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
    except IndexError:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")


async def monitor_wallets():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—à–µ–ª—å–∫–æ–≤"""
    while True:
        try:
            wallets = db.get_set(WATCHED_WALLETS_KEY)
            print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏: {wallets}")

            for wallet in wallets:
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {wallet}")
                transactions = await check_wallet_transactions(wallet)
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")

                for tx in transactions:
                    message = format_transaction_message(tx)
                    await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=message, parse_mode="Markdown")
                    db.add_to_set(f"{PROCESSED_TXS_KEY}:{wallet}", tx.hash)
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx.hash}")

            await asyncio.sleep(10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(10)


async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤...")
    asyncio.create_task(monitor_wallets())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
